STOCKIT - SALON STOCK MANAGEMENT SYSTEM
DEPLOYMENT GUIDE FOR RENDER
=====================================

OVERVIEW
--------
Stockit is a full-stack TypeScript application built with React (frontend) and Express.js (backend).
It uses PostgreSQL for data storage and provides direct access to salon stock management features.

SYSTEM REQUIREMENTS
------------------
- Node.js 18+ 
- PostgreSQL database
- Environment variable for database connection

PROJECT STRUCTURE
-----------------
/client/          - React frontend (Vite build)
/server/          - Express.js backend
/shared/          - Shared TypeScript types and schemas
package.json      - Root package.json with build scripts
drizzle.config.ts - Database configuration
vite.config.ts    - Frontend build configuration

KEY FILES FOR DEPLOYMENT
------------------------
1. package.json - Contains all dependencies and build scripts
2. server/index.ts - Main server entry point
3. client/src/ - Frontend React application
4. shared/schema.ts - Database schema definitions
5. drizzle.config.ts - Database migrations configuration

BUILD PROCESS
-------------
The application uses a two-stage build process:

1. Frontend Build (Vite):
   - Builds React app to /dist/client
   - Optimizes assets and creates production bundle
   
2. Backend Build (ESBuild):
   - Compiles TypeScript server to /dist/server.js
   - Creates single executable file

BUILD COMMANDS
--------------
npm install              # Install all dependencies
npm run build           # Build both frontend and backend
npm run start           # Start production server
npm run dev             # Development mode (not for production)
npm run db:push         # Push database schema (Drizzle)
npm run prepare         # Prepare for deployment (runs build)
npm run postinstall     # Post-install setup (runs db:push)

ENVIRONMENT VARIABLES REQUIRED
------------------------------
DATABASE_URL=postgres://username:password@host:port/database

Optional (automatically set by Render):
PORT=5000

DEPLOYMENT STEPS FOR RENDER
---------------------------

1. CREATE NEW WEB SERVICE
   - Connect your GitHub repository
   - Choose "Node.js" as runtime
   - Set build command: npm run build
   - Set start command: npm run start
   - Set environment: Node.js 18

2. CONFIGURE ENVIRONMENT VARIABLES
   - Add DATABASE_URL pointing to your PostgreSQL instance
   - PORT is automatically set by Render

3. DATABASE SETUP
   - Create PostgreSQL database (Render PostgreSQL or external)
   - Run database migrations: npm run db:push
   - Database tables will be created automatically

4. FINAL DEPLOYMENT
   - Application will be available on your assigned Render domain
   - No additional configuration needed

5. DEPLOY
   - Render will automatically build and deploy
   - Application will be available on your assigned domain

RENDER CONFIGURATION
-------------------
Build Command: npm run build
Start Command: npm run start
Environment: Node.js 18
Auto-Deploy: Yes (recommended)

HEALTH CHECK
-----------
The application serves on port 5000 by default.
Health check endpoint: / (returns the React app)
API endpoints start with /api/

DATABASE NOTES
--------------
- Uses Drizzle ORM for type-safe database operations
- Schema is defined in shared/schema.ts
- Migrations are handled by npm run db:push
- Supports PostgreSQL with connection pooling

FEATURES INCLUDED
----------------
- Profit Calculator with VAT calculations
- Retail Budget Manager with supplier allocations
- Professional Stock Budget tracking
- Multi-currency support (GBP, USD, EUR)
- Mobile-responsive design
- Interactive onboarding tutorial
- Excel export functionality
- Undo/redo functionality
- Direct access to all stock management features

STATIC FILES
-----------
Frontend assets are served from /dist/client
All routes are handled by React Router (client-side routing)
API routes are prefixed with /api/

TROUBLESHOOTING
--------------
1. Build fails: Check Node.js version (requires 18+)
2. Database connection: Verify DATABASE_URL format
3. Missing dependencies: Run npm install
4. TypeScript errors: Check shared types in /shared/
5. Schema issues: Run npm run db:push to sync database

SECURITY CONSIDERATIONS
----------------------
- Database queries use parameterized statements
- Environment variables store sensitive data
- Input validation on all API endpoints
- CORS configured properly

MONITORING
----------
- Application logs are available in Render dashboard
- Database connection status logged on startup
- Error handling includes user-friendly messages
- API endpoints provide detailed error responses

BACKUP & MAINTENANCE
-------------------
- Database backups handled by your PostgreSQL provider
- Application state is stored in database only
- No local file storage used
- Updates can be deployed via Git push

PERFORMANCE NOTES
----------------
- Frontend assets are optimized and compressed
- Database uses connection pooling
- Static files served with proper caching headers
- Mobile-optimized responsive design

CONTACT & SUPPORT
----------------
For technical issues or questions about deployment,
refer to this documentation, README.txt, or SYSTEM_REQUIREMENTS.txt.

Last Updated: June 19, 2025
Version: 1.0.0